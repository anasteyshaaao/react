import React from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { flexRender } from '@tanstack/react-table';

export const SortableHeader = ({ header, table }) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤
  if (!header || !header.column || !header.getContext) {
    console.error('Invalid header prop provided to SortableHeader');
    return null;
  }

  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: header.column.id,
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition: isDragging ? 'none' : transition, // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    cursor: isDragging ? 'grabbing' : 'grab',
    opacity: isDragging ? 0.8 : 1,
    backgroundColor: isDragging ? '#f8f9fa' : 'inherit',
    position: 'relative',
    zIndex: isDragging ? 100 : 'auto',
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  const canSort = header.column.getCanSort();

  return (
    <th
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      colSpan={header.colSpan}
      onClick={canSort ? header.column.getToggleSortingHandler() : undefined}
      className={canSort ? 'sortable-column' : ''}
    >
      <div className="d-flex align-items-center">
        {flexRender(header.column.columnDef.header, header.getContext())}
        {canSort && (
          <span className="ms-1">
            {{
              asc: 'üîº',
              desc: 'üîΩ',
            }[header.column.getIsSorted()] ?? '‚ÜïÔ∏è'}
          </span>
        )}
      </div>
    </th>
  );
};